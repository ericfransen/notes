#!/bin/bash

# --- Find Project Root ---
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
PROJECT_ROOT="$SCRIPT_DIR/.."
CONFIG_FILE="$PROJECT_ROOT/config.sh"

# --- Argument Parsing ---
OPEN_IN_VAULT="false"
KEYWORDS=()
METADATA_YAML=""
OTHER_ARGS=()
CUSTOM_TITLE=""

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -v)
      OPEN_IN_VAULT="true"
      shift
      ;;
    --title)
      CUSTOM_TITLE="$2"
      shift; shift
      ;;
    --*)
      key="${1#--}"
      if [[ -n "$2" ]] && [[ "$2" != --* ]] && [[ "$2" != '#'* ]]; then
        value="$2"
        METADATA_YAML+="${key}: \"${value}\"\n"
        shift; shift
      else
        METADATA_YAML+="${key}: true\n"
        shift
      fi
      ;;
    '#'*)
      KEYWORDS+=("$(echo "${1#\#}" | tr '[:upper:]' '[:lower:]')")
      shift
      ;;
    *)
      OTHER_ARGS+=("$1")
      shift
      ;;
  esac
done

# The first non-flag argument is the note string for atomic notes
NOTE_STRING="${OTHER_ARGS[0]}"
# The first utility command (e.g., -vault, -debug) is also captured here
COMMAND="${OTHER_ARGS[0]}"

# --- Command Routing ---
# Allow for commands with a leading hyphen
if [[ "$COMMAND" == -* ]]; then
    COMMAND="${COMMAND#-}"
fi

if [[ "$COMMAND" == "cmd" ]]; then
    cat "$PROJECT_ROOT/COMMANDS.md"
    exit 0
fi

# --- For all other commands, source the config ---
if [ ! -f "$CONFIG_FILE" ]; then echo "Config not found. Run 'bash scripts/setup.sh'" >&2; exit 1; fi
source "$CONFIG_FILE"

if [[ "$COMMAND" == "vault" ]]; then
    if [ -n "$VAULT_PATH" ]; then
        echo "Your vault is currently set to: $VAULT_PATH"
        read -p "Do you want to change it? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "Enter the new path to your vault: " new_vault_path
            # Update the config file
            sed -i '' "s|VAULT_PATH=.*|VAULT_PATH=\"$new_vault_path\"|" "$CONFIG_FILE"
            echo "Vault path updated to: $new_vault_path"
        else
            read -p "Do you want to open the vault? (y/n) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                "$EDITOR_CMD" "$VAULT_PATH"
            fi
        fi
    else
        echo "Your vault is not yet configured."
        read -p "Enter the path to your vault: " new_vault_path
        # Update the config file
        echo "VAULT_PATH=\"$new_vault_path\"" >> "$CONFIG_FILE"
        echo "Vault path set to: $new_vault_path"
    fi
    exit 0
fi

# --- Handle all other utility commands ---
case "$COMMAND" in
    debug)
        set -x
        ;;
    git-setup)
        if [ ! -d "$VAULT_PATH/.git" ]; then
            git init "$VAULT_PATH"
            echo "Git repository initialized in '$VAULT_PATH'."
        else
            echo "Git repository already exists in '$VAULT_PATH'."
        fi
        exit 0
        ;;
    sync-status)
        (cd "$VAULT_PATH" && git status)
        exit 0
        ;;
    code)
        "$EDITOR_CMD" "$VAULT_PATH"
        exit 0
        ;;
    obsidian)
        open "obsidian://vault/${VAULT_NAME}"
        exit 0
        ;;
    daily)
        DAILY_NOTE_PATH="$PROJECT_ROOT/$DAILY_NOTE_TEMPLATE_PATH"
        if [ ! -f "$DAILY_NOTE_PATH" ]; then
            echo "Daily note template not found at '$DAILY_NOTE_PATH'" >&2
            exit 1
        fi
        # Create a title like "2023-10-27_Friday"
        # YYYY-MM-DD_Day
        DAILY_TITLE="$(date +'%Y-%m-%d_%A')"
        FILENAME="${FILE_TIMESTAMP}_daily.md"
        FILEPATH="${VAULT_PATH}/${DAILY_NOTES_SUBDIR}/${FILENAME}"
        mkdir -p "${VAULT_PATH}/${DAILY_NOTES_SUBDIR}"
        
        CONTENT=$(cat "$DAILY_NOTE_PATH" | awk -v ts="$(date +'%Y-%m-%d %H:%M:%S')" -v ti="$DAILY_TITLE" '{
            gsub(/<% timestamp %>/, ts);
            gsub(/<% title %>/, ti);
            print;
        }')
        echo "$CONTENT" > "$FILEPATH"
        echo "Note created: $FILEPATH"
        "$EDITOR_CMD" -g "$FILEPATH":10
        exit 0
        ;;
    rename-all-untitled)
        "$PROJECT_ROOT/scripts/note-sync" --rename-all
        exit 0
        ;;
esac

# --- Main Note Creation Logic ---
if [ -z "$VAULT_PATH" ]; then echo "VAULT_PATH is not set. Please run 'note -vault'." >&2; exit 1; fi

MODE="editor"
# Atomic mode is only triggered if a note string is provided.
if [[ -n "$NOTE_STRING" ]]; then
    MODE="atomic"
fi

DEFAULT_SUBDIR="00 - Inbox"
to_kebab_case() { echo "$1" | cut -d' ' -f1-5 | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr '[:upper:]' '[:lower:]'; }

TIMESTAMP=$(date +'%y-%m-%d %H:%M:%S'); FILE_TIMESTAMP=$(date +'%y-%m-%d_%H-%M')
SUBDIR="$DEFAULT_SUBDIR"; TITLE=""; BODY=""; KEYWORDS_STRING=""
if [ ${#KEYWORDS[@]} -gt 0 ]; then SUBDIR="${KEYWORDS[0]}"; KEYWORDS_STRING=$(IFS=,; echo "${KEYWORDS[*]}"); fi
if [ "$MODE" == "atomic" ]; then
    TITLE=$(echo "$NOTE_STRING" | cut -c 1-80)
    BODY="$NOTE_STRING"
else
    TITLE="untitled"
    BODY=""
fi

if [[ -n "$CUSTOM_TITLE" ]]; then
    TITLE="$CUSTOM_TITLE"
fi

KEBAB_TITLE=$(to_kebab_case "$TITLE"); FILENAME="${FILE_TIMESTAMP}_${KEBAB_TITLE}.md"
TARGET_DIR="${VAULT_PATH}/${SUBDIR}"; FILEPATH="${TARGET_DIR}/${FILENAME}"; mkdir -p "$TARGET_DIR"

# --- Template Selection Logic ---
# Default to the standard note template
TEMPLATE_PATH="$PROJECT_ROOT/$NOTE_TEMPLATE_PATH"

# Check if the primary keyword has a mapped template
if [ ${#KEYWORDS[@]} -gt 0 ]; then
    FIRST_KEYWORD="${KEYWORDS[0]}"
    if [[ -n "${TEMPLATES[$FIRST_KEYWORD]}" ]]; then
        # If a mapping exists, use that template instead
        TEMPLATE_PATH="$PROJECT_ROOT/${TEMPLATES[$FIRST_KEYWORD]}"
        echo "Using template for keyword: $FIRST_KEYWORD"
    fi
fi

if [ ! -f "$TEMPLATE_PATH" ]; then echo "Warning: Template not found." >&2; touch "$FILEPATH"; else
    CONTENT=$(cat "$TEMPLATE_PATH" | awk -v ts="$TIMESTAMP" -v ti="$TITLE" -v kw="$KEYWORDS_STRING" -v bd="$BODY" -v meta="$METADATA_YAML" '{
        gsub(/<% timestamp %>/, ts);
        gsub(/<% title %>/, ti);
        gsub(/<% keywords %>/, kw);
        gsub(/<% body %>/, bd);
        gsub(/<% metadata %>/, meta);
        print;
    }')
    echo "$CONTENT" > "$FILEPATH"
fi

echo "Note created: $FILEPATH"
if [ "$MODE" == "editor" ]; then
    echo "Opening for editing..."
    if [[ "$OPEN_IN_VAULT" == "true" ]]; then "$EDITOR_CMD" "$VAULT_PATH"; else "$EDITOR_CMD" -g "$FILEPATH":10; fi
fi