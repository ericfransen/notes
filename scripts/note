#!/bin/bash

# --- Find Project Root ---
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
PROJECT_ROOT="$SCRIPT_DIR/.."
CONFIG_FILE="$PROJECT_ROOT/config.sh"

# --- Argument Parsing ---
OPEN_IN_VAULT="false"
KEYWORDS=()
METADATA_YAML=""
OTHER_ARGS=()
CUSTOM_TITLE=""
PROCESSED_DIR=""
USE_FZF_TEMPLATE=false
TEMPLATE_ALIAS=""

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -v)
      OPEN_IN_VAULT="true"
      shift
      ;;
    -template)
      USE_FZF_TEMPLATE=true
      shift
      ;;
    --title)
      if [ -n "$CUSTOM_TITLE" ]; then
        echo "Error: Only one title can be provided." >&2
        exit 1
      fi
      CUSTOM_TITLE="$2"
      shift; shift
      ;;
    _*)
      if [ -n "$CUSTOM_TITLE" ]; then
        echo "Error: Only one title can be provided." >&2
        exit 1
      fi
      CUSTOM_TITLE="${1#_}"
      shift
      ;;
    --*)
      key="${1#--}"
      if [[ -n "$2" ]] && [[ "$2" != --* ]] && [[ "$2" != '@'* ]] && [[ "$2" != '+'* ]]; then
        value="$2"
        METADATA_YAML+="${key}: \"${value}\"\n"
        shift; shift
      else
        METADATA_YAML+="${key}: true\n"
        shift
      fi
      ;;
    +*)
      KEYWORDS+=("$(echo "${1#+}" | tr '[:upper:]' '[:lower:]')")
      shift
      ;;
    @*)
      PROCESSED_DIR="${1#@}"
      shift
      ;;
    "%")
      USE_FZF_TEMPLATE=true
      shift
      ;;
    %*)
      TEMPLATE_ALIAS="${1#%}"
      shift
      ;;
    *)
      OTHER_ARGS+=("$1")
      shift
      ;;
  esac
done

# The first non-flag argument is the note string for atomic notes
NOTE_STRING="${OTHER_ARGS[0]}"
# The first utility command (e.g., -vault, -debug) is also captured here
COMMAND="${OTHER_ARGS[0]}"

# --- For all other commands, source the config ---
if [ ! -f "$CONFIG_FILE" ]; then echo "Config not found. Run 'bash scripts/setup.sh'" >&2; exit 1; fi
source "$CONFIG_FILE"

# --- Command Routing ---
# Allow for commands with a leading hyphen
if [[ "$COMMAND" == -* ]]; then
    COMMAND="${COMMAND#-}"
fi

if [[ "$COMMAND" == "cmd" ]]; then
    cat "$PROJECT_ROOT/COMMANDS.md"
    exit 0
fi

if [[ "$COMMAND" == "vault" ]]; then
    if [ -n "$VAULT_PATH" ]; then
        echo "Your vault is currently set to: $VAULT_PATH"
        read -p "Do you want to change it? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "Enter the new path to your vault: " new_vault_path
            # Update the config file
            sed -i '' "s|VAULT_PATH=.*|VAULT_PATH=\"$new_vault_path\"|" "$CONFIG_FILE"
            echo "Vault path updated to: $new_vault_path"
        else
            read -p "Do you want to open the vault? (y/n) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                "$EDITOR_CMD" "$VAULT_PATH"
            fi
        fi
    else
        echo "Your vault is not yet configured."
        read -p "Enter the path to your vault: " new_vault_path
        # Update the config file
        echo "VAULT_PATH=\"$new_vault_path\"" >> "$CONFIG_FILE"
        echo "Vault path set to: $new_vault_path"
    fi
    exit 0
fi

# --- Handle all other utility commands ---
case "$COMMAND" in
    debug)
        set -x
        ;;
    git-setup)
        if [ ! -d "$VAULT_PATH/.git" ]; then
            git init "$VAULT_PATH"
            echo "Git repository initialized in '$VAULT_PATH'."
        else
            echo "Git repository already exists in '$VAULT_PATH'."
        fi
        exit 0
        ;;
    sync-status)
        (cd "$VAULT_PATH" && git status)
        exit 0
        ;;
    code)
        "$EDITOR_CMD" "$VAULT_PATH"
        exit 0
        ;;
    obsidian)
        open "obsidian://vault/${VAULT_NAME}"
        exit 0
        ;;
    daily)
        DAILY_NOTE_PATH="$PROJECT_ROOT/$DAILY_NOTE_TEMPLATE_PATH"
        if [ ! -f "$DAILY_NOTE_PATH" ]; then
            echo "Daily note template not found at '$DAILY_NOTE_PATH'" >&2
            exit 1
        fi
        # Create a title like "2023-10-27_Friday"
        # YYYY-MM-DD_Day
        DAILY_TITLE="$(date +'%Y-%m-%d_%A')"
        FILENAME="${FILE_TIMESTAMP}_daily.md"
        FILEPATH="${VAULT_PATH}/${DAILY_NOTES_SUBDIR}/${FILENAME}"
        mkdir -p "${VAULT_PATH}/${DAILY_NOTES_SUBDIR}"
        
        CONTENT=$(cat "$DAILY_NOTE_PATH" | awk -v ts="$(date +'%Y-%m-%d %H:%M:%S')" -v ti="$DAILY_TITLE" '{
            gsub(/<% timestamp %>/, ts);
            gsub(/<% title %>/, ti);
            print;
        }')
        echo "$CONTENT" > "$FILEPATH"
        echo "Note created: $FILEPATH"
        "$EDITOR_CMD" -g "$FILEPATH":10
        exit 0
        ;;
    rename-all-untitled)
        "$PROJECT_ROOT/scripts/note-sync" --rename-all
        exit 0
        ;;
esac

# --- Main Note Creation Logic ---
if [ -z "$VAULT_PATH" ]; then echo "VAULT_PATH is not set. Please run 'note -vault'." >&2; exit 1; fi

MODE="editor"
# Atomic mode is only triggered if a note string is provided.
if [[ -n "$NOTE_STRING" ]]; then
    MODE="atomic"
fi

if [[ -n "$PROCESSED_DIR" ]]; then
    SUBDIR="$PROCESSED_DIR"
    STATUS="processed"
else
    SUBDIR="00 - Inbox"
    STATUS="inbox"
fi

to_kebab_case() { echo "$1" | cut -d' ' -f1-5 | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr '[:upper:]' '[:lower:]'; }

TIMESTAMP=$(date +'%y-%m-%d %H:%M:%S'); FILE_TIMESTAMP=$(date +'%y-%m-%d_%H-%M')
TITLE=""; BODY=""; KEYWORDS_STRING=""
if [ ${#KEYWORDS[@]} -gt 0 ]; then KEYWORDS_STRING=$(IFS=,; echo "${KEYWORDS[*]}"); fi
if [ "$MODE" == "atomic" ]; then
    TITLE=$(echo "$NOTE_STRING" | cut -c 1-80)
    BODY="$NOTE_STRING"
else
    TITLE="untitled"
    BODY=""
fi

if [[ -n "$CUSTOM_TITLE" ]]; then
    TITLE="$CUSTOM_TITLE"
fi

KEBAB_TITLE=$(to_kebab_case "$TITLE"); FILENAME="${FILE_TIMESTAMP}_${KEBAB_TITLE}.md"
TARGET_DIR="${VAULT_PATH}/${SUBDIR}"; FILEPATH="${TARGET_DIR}/${FILENAME}"; mkdir -p "$TARGET_DIR"

# --- Template Selection Logic ---
# Default to the standard note template
TEMPLATE_PATH="$PROJECT_ROOT/$NOTE_TEMPLATE_PATH"

# If -template is used, launch fzf
if [ "$USE_FZF_TEMPLATE" = true ]; then
    if ! command -v fzf &> /dev/null; then
        echo "fzf is not installed. Please install it to use the template selection feature." >&2
        echo "See: https://github.com/junegunn/fzf#installation" >&2
        exit 1
    fi
    SELECTED_TEMPLATE_NAME=$(find "$PROJECT_ROOT/templates" -type f -name "*.md" | sed "s|$PROJECT_ROOT/templates/||" | fzf --prompt="Select a template: " --height=20 --border --color=dark)
    if [ -n "$SELECTED_TEMPLATE_NAME" ]; then
        TEMPLATE_PATH="$PROJECT_ROOT/templates/$SELECTED_TEMPLATE_NAME"
    else
        echo "No template selected. Aborting." >&2
        exit 1
    fi
fi

# If %template-alias is used, look it up in the config
if [ -n "$TEMPLATE_ALIAS" ]; then
    while read -r alias path; do
        if [ -n "$alias" ] && [ "$alias" == "$TEMPLATE_ALIAS" ]; then
            TEMPLATE_PATH="$PROJECT_ROOT/$path"
            break
        fi
    done <<< "$TEMPLATE_MAPPINGS"

    if [ ! -f "$TEMPLATE_PATH" ]; then
        echo "Warning: Template alias '%$TEMPLATE_ALIAS' not found in config.sh." >&2
        if ! command -v fzf &> /dev/null; then
            echo "fzf is not installed. Please install it to use the template selection feature." >&2
            echo "See: https://github.com/junegunn/fzf#installation" >&2
            exit 1
        fi
        SELECTED_TEMPLATE_NAME=$(find "$PROJECT_ROOT/templates" -type f -name "*.md" | sed "s|$PROJECT_ROOT/templates/||" | fzf --prompt="Select a template: " --height=20 --border --color=dark)
        if [ -n "$SELECTED_TEMPLATE_NAME" ]; then
            TEMPLATE_PATH="$PROJECT_ROOT/templates/$SELECTED_TEMPLATE_NAME"
        else
            echo "No template selected. Aborting." >&2
            exit 1
        fi
    fi
fi

if [ ! -f "$TEMPLATE_PATH" ]; then echo "Warning: Template not found." >&2; touch "$FILEPATH"; else
    CONTENT=$(cat "$TEMPLATE_PATH" | awk -v ts="$TIMESTAMP" -v ti="$TITLE" -v kw="$KEYWORDS_STRING" -v bd="$BODY" -v meta="$METADATA_YAML" -v status="$STATUS" '{
        gsub(/<% timestamp %>/, ts);
        gsub(/<% title %>/, ti);
        gsub(/<% keywords %>/, kw);
        gsub(/<% body %>/, bd);
        gsub(/<% metadata %>/, meta);
        gsub(/<% status %>/, status);
        print;
    }')
    echo "$CONTENT" > "$FILEPATH"
fi

body_line_number=$(echo "$CONTENT" | grep -n "## Body" | cut -d: -f1)
cursor_line_number=$((body_line_number + 1))

echo "Note created: $FILEPATH"
if [ "$MODE" == "editor" ]; then
    echo "Opening for editing..."
    if [[ "$OPEN_IN_VAULT" == "true" ]]; then 
        "$EDITOR_CMD" "$VAULT_PATH" --goto "$FILEPATH":$cursor_line_number; 
    else 
        "$EDITOR_CMD" -g "$FILEPATH":$cursor_line_number; 
    fi
fi