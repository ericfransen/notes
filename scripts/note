#!/bin/bash

# --- Find Project Root ---
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
PROJECT_ROOT="$SCRIPT_DIR/.."
CONFIG_FILE="$PROJECT_ROOT/config.sh"

# --- Initial Argument Parsing for Flags ---
OPEN_IN_VAULT="false"
ARGS=()
for arg in "$@"; do
  if [[ "$arg" == "-v" ]]; then OPEN_IN_VAULT="true"; else ARGS+=("$arg"); fi
done
set -- "${ARGS[@]}"

# --- Command Routing ---

# The -vault command is special: it runs first and can create the config.
if [[ "$1" == "-vault" ]]; then
    if [ -f "$CONFIG_FILE" ]; then source "$CONFIG_FILE"; fi
    should_run_setup=true
    if [ -n "$VAULT_PATH" ] && [ -d "$VAULT_PATH" ]; then
        echo "A vault is already configured at: $VAULT_PATH"
        read -p "Would you like to keep using this vault? (Y/n) " keep_vault
        if [[ ! "$keep_vault" =~ ^[nN]$ ]]; then should_run_setup=false; echo "Keeping existing vault configuration."; fi
    fi

    if [ "$should_run_setup" = true ]; then
        echo "How would you like to configure your Obsidian vault?"
        echo "  1) Manually enter path to an existing vault"
        echo "  2) Create a new vault at a specified path"
        echo "  3) Search your home directory for vaults (can be slow)"
        read -p "Choice: " menu_choice
        NEW_VAULT_PATH=""
        case $menu_choice in
            1) read -p "Enter the absolute path to your vault: " manual_path; NEW_VAULT_PATH=$(eval echo "$manual_path") ;;
            2) read -p "Enter path for new vault (e.g., ~/my-notes): " new_path; NEW_VAULT_PATH=$(eval echo "$new_path"); mkdir -p "$NEW_VAULT_PATH" ;;
            3) 
                echo "Searching for Obsidian Vaults..."
                temp_vault_list=$(mktemp)
                find "$HOME" -type d -name ".obsidian" -not -path "*/Application Support/*" -not -path "*/.config/*" -exec dirname {} \; 2>/dev/null > "$temp_vault_list"
                if [ ! -s "$temp_vault_list" ]; then echo "No vaults found."; else
                    echo "Found vaults:"; nl -w2 -s') ' "$temp_vault_list"
                    read -p "Select a vault by number: " vault_num_choice
                    selected_path=$(sed -n "${vault_num_choice}p" "$temp_vault_list")
                    if [ -n "$selected_path" ]; then NEW_VAULT_PATH=$selected_path; else echo "Invalid selection." >&2; rm "$temp_vault_list"; exit 1; fi
                fi; rm "$temp_vault_list" ;;
            *) echo "Invalid choice." >&2; exit 1 ;; 
        esac

        if [ -n "$NEW_VAULT_PATH" ] && [ -d "$NEW_VAULT_PATH" ]; then
            if [ -f "$CONFIG_FILE" ]; then grep -v "^#*VAULT_PATH=" "$CONFIG_FILE" > "${CONFIG_FILE}.tmp" && mv "${CONFIG_FILE}.tmp" "$CONFIG_FILE"; fi
            echo "VAULT_PATH=\"$NEW_VAULT_PATH\"" >> "$CONFIG_FILE"
            echo "Vault path updated to: $NEW_VAULT_PATH"
        else echo "Error: Invalid path or no selection made." >&2; fi
    fi
    exit 0
fi

# --- For all other commands, we must be able to source the config ---
if [ ! -f "$CONFIG_FILE" ]; then echo "Configuration file not found. Please run 'bash scripts/setup.sh'" >&2; exit 1; fi
source "$CONFIG_FILE"

# --- Handle all other utility commands ---
case "$1" in
    -debug)
        echo "--- NOTE SCRIPT DEBUGGER ---"
        echo "1. SHELL & VERSION:"; echo "   SHELL: $SHELL"; echo "   BASH_VERSION: $BASH_VERSION"
        echo "2. SCRIPT & FILE PATHS:"; echo "   SCRIPT_DIR: $SCRIPT_DIR"; echo "   PROJECT_ROOT: $PROJECT_ROOT"; echo "   CONFIG_FILE: $CONFIG_FILE"
        echo "3. CONFIGURATION:"; cat "$CONFIG_FILE"
        echo "4. SUBSTITUTION TEST:"; test_string="replace <% this %>"; result_string="${test_string//<% this %>/WORKED}"
        echo "   Result: '$result_string'"; if [[ "$result_string" == "replace WORKED" ]]; then echo "   ✅ Substitution appears to be working."; else echo "   ❌ Substitution FAILED."; fi
        echo "--- END OF DEBUG ---"
        exit 0 ;; 
    -git-setup)
        echo "Checking Git status of your vault at $VAULT_PATH..."
        if [ ! -d "$VAULT_PATH/.git" ]; then echo "Error: Vault is not a Git repository." >&2; exit 1; fi
        if git -C "$VAULT_PATH" remote get-url origin >/dev/null 2>&1; then echo "✓ Git remote 'origin' already exists."; exit 0; fi
        echo "✓ No remote 'origin' found."
        if command -v gh &> /dev/null && gh auth status >/dev/null 2>&1; then
            read -p "ATTENTION: Create a new PRIVATE repository on GitHub named 'notes-vault' and push? (Y/n) " create_gh_repo
            if [[ ! "$create_gh_repo" =~ ^[nN]$ ]]; then
                (cd "$VAULT_PATH" && gh repo create notes-vault --private --source=. --remote=origin --push)
            fi
        else echo "✗ GitHub CLI ('gh') not found or not authenticated."; fi
        exit 0 ;; 
    -sync-status)
        echo "--- Sync Status ---"
        cron_job=$(crontab -l 2>/dev/null | grep 'note-sync')
        if [ -n "$cron_job" ]; then echo "✓ Cron job is installed: $cron_job"; else echo "✗ Cron job is NOT installed."; fi
        if [ -f "$PROJECT_ROOT/.sync_log" ]; then echo "✓ Last sync attempt: $(cat "$PROJECT_ROOT/.sync_log")"; else echo "No record of a previous sync run."; fi
        exit 0 ;; 
    -code) echo "Opening vault in editor..."; "$EDITOR_CMD" "$VAULT_PATH"; exit 0 ;; 
    -obsidian) echo "Launching Obsidian..."; open "obsidian://open?vault=$(basename "$VAULT_PATH")"; exit 0 ;; 
    -daily)
        DAILY_DIR_NAME=${DAILY_DIR:-dailies}; DAILY_NOTE_DIR="$VAULT_PATH/$DAILY_DIR_NAME"; mkdir -p "$DAILY_NOTE_DIR"
        DAILY_FILENAME="$(date +'%Y-%m-%d').md"; DAILY_FILEPATH="$DAILY_NOTE_DIR/$DAILY_FILENAME"
        if [ -f "$DAILY_FILEPATH" ]; then echo "Opening today's daily note..."; else
            echo "Creating today's daily note..."
            TEMPLATE_PATH="$PROJECT_ROOT/$DAILY_TEMPLATE_PATH"
            if [ ! -f "$TEMPLATE_PATH" ]; then touch "$DAILY_FILEPATH"; else
                CONTENT=$(cat "$TEMPLATE_PATH" | awk -v ts="$(date +'%Y-%m-%d %H:%M:%S')" -v ti="$(date +'%Y-%m-%d')" '{ gsub(/<% timestamp %>/, ts); gsub(/<% title %>/, ti); print; }')
                echo "$CONTENT" > "$DAILY_FILEPATH"
            fi
        fi
        if [[ "$OPEN_IN_VAULT" == "true" ]]; then "$EDITOR_CMD" -r "$VAULT_PATH" "$DAILY_FILEPATH"; else "$EDITOR_CMD" "$DAILY_FILEPATH"; fi
        exit 0 ;; 
esac

# --- Main Note Creation Logic ---
if [ -z "$VAULT_PATH" ]; then echo "VAULT_PATH is not set. Please run 'note -vault'." >&2; exit 1; fi
DEFAULT_SUBDIR="00 - Inbox"
to_kebab_case() { echo "$1" | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr '[:upper:]' '[:lower:]'; }

NOTE_STRING=""; KEYWORDS=()
for arg in "$@" ; do
    case "$arg" in
        '#'*) KEYWORDS+=("$(echo "${arg#
ě}" | tr '[:upper:]' '[:lower:]')") ;; 
        *) if [[ -z "$NOTE_STRING" ]]; then NOTE_STRING="$arg"; fi ;; 
    esac
done

MODE="editor"; [[ -n "$NOTE_STRING" ]] && MODE="atomic"
TIMESTAMP="$(date +'%Y-%m-%d %H:%M:%S')"; FILE_TIMESTAMP="$(date +'%Y-%m-%d_%H-%M')"
SUBDIR="$DEFAULT_SUBDIR"; TITLE=""; BODY=""; KEYWORDS_STRING=""
if [ ${#KEYWORDS[@]} -gt 0 ]; then SUBDIR="${KEYWORDS[0]}"; KEYWORDS_STRING="$(IFS=,; echo "${KEYWORDS[*]}")"; fi
if [ "$MODE" == "atomic" ]; then TITLE="$(echo "$NOTE_STRING" | cut -c 1-80)"; BODY="$NOTE_STRING"; else TITLE="untitled"; BODY=""; fi
KEBAB_TITLE="$(to_kebab_case "$TITLE")"; FILENAME="${FILE_TIMESTAMP}_${KEBAB_TITLE}.md"
TARGET_DIR="${VAULT_PATH}/${SUBDIR}"; FILEPATH="${TARGET_DIR}/${FILENAME}"; mkdir -p "$TARGET_DIR"
TEMPLATE_PATH="$PROJECT_ROOT/$NOTE_TEMPLATE_PATH"

if [ ! -f "$TEMPLATE_PATH" ]; then echo "Warning: Template not found at '$TEMPLATE_PATH'." >&2; touch "$FILEPATH"; else
    CONTENT=$(cat "$TEMPLATE_PATH" | awk -v ts="$TIMESTAMP" -v ti="$TITLE" -v kw="$KEYWORDS_STRING" -v bd="$BODY" '{ gsub(/<% timestamp %>/, ts); gsub(/<% title %>/, ti); gsub(/<% keywords %>/, kw); gsub(/<% body %>/, bd); print; }')
    echo "$CONTENT" > "$FILEPATH"
fi

echo "Note created: $FILEPATH"
if [ "$MODE" == "editor" ]; then 
    echo "Opening for editing..."
    if [[ "$OPEN_IN_VAULT" == "true" ]]; then "$EDITOR_CMD" -r -g "$FILEPATH":3; else "$EDITOR_CMD" -g "$FILEPATH":3; fi
fi