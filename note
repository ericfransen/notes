#!/bin/bash
#
# note: An ultra-lightweight command-line note-taking script for Obsidian.
#

# --- Find Script Directory ---
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ "$SOURCE" != /* ]] && SOURCE=$DIR/$SOURCE
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

# --- Static Config (pre-config file) ---
TEMPLATE_FILE="note_template.md"
CONFIG_FILE="$SCRIPT_DIR/config.sh"

# --- Command Routing ---

# The -vault command is special: it runs first and creates the config.
if [[ "$1" == "-vault" ]]; then
    echo "How would you like to configure your Obsidian vault?"
    echo "  1) Manually enter path to an existing vault"
    echo "  2) Create a new vault at a specified path"
    echo "  3) Search your home directory for vaults (can be slow)"
    read -p "Choice: " menu_choice

    NEW_VAULT_PATH=""
    case $menu_choice in
        1) read -p "Enter the absolute path to your vault: " manual_path; NEW_VAULT_PATH=$(eval echo "$manual_path") ;;
        2) read -p "Enter path for new vault (e.g., ~/my-notes): " new_path; NEW_VAULT_PATH=$(eval echo "$new_path"); mkdir -p "$NEW_VAULT_PATH" ;;
        3) 
            echo "Searching for Obsidian Vaults (this may take several minutes)..."
            temp_vault_list=$(mktemp)
            find "$HOME" -type d -name ".obsidian" -not -path "*/Application Support/*" -not -path "*/.config/*" -exec dirname {} \; 2>/dev/null > "$temp_vault_list"
            if [ ! -s "$temp_vault_list" ]; then echo "No vaults found."; else
                echo "Found vaults:"; nl -w2 -s') ' "$temp_vault_list"
                read -p "Select a vault by number: " vault_num_choice
                selected_path=$(sed -n "${vault_num_choice}p" "$temp_vault_list")
                if [ -n "$selected_path" ]; then NEW_VAULT_PATH=$selected_path; else echo "Invalid selection." >&2; rm "$temp_vault_list"; exit 1; fi
            fi; rm "$temp_vault_list" ;;
        *) echo "Invalid choice." >&2; exit 1 ;;
    esac

    if [ -n "$NEW_VAULT_PATH" ] && [ -d "$NEW_VAULT_PATH" ]; then
        echo "# Note-taking system configuration" > "$CONFIG_FILE"
        echo "VAULT_PATH=\"$NEW_VAULT_PATH\"" >> "$CONFIG_FILE"
        echo "Vault path updated to: $NEW_VAULT_PATH"
    else echo "Error: Invalid path or no selection made." >&2; fi
    exit 0
fi

# --- For all other commands, now we source the config ---
if [ -f "$CONFIG_FILE" ]; then source "$CONFIG_FILE"; else
    echo "Configuration file not found. Please run 'note -vault' or the setup script." >&2; exit 1
fi

# --- Debug Command ---
if [[ "$1" == "-debug" ]]; then
    echo "--- NOTE SCRIPT DEBUGGER ---"
    echo ""
    echo "1. SHELL & VERSION:"
    echo "   SHELL: $SHELL"
    echo "   BASH: $BASH"
    echo "   BASH_VERSION: $BASH_VERSION"
    echo ""

    echo "2. SCRIPT & FILE PATHS:"
    echo "   BASH_SOURCE[0]: ${BASH_SOURCE[0]}"
    echo "   Resolved SCRIPT_DIR: $SCRIPT_DIR"
    echo "   Config file used: $CONFIG_FILE"
    echo "   Template file path: $SCRIPT_DIR/$TEMPLATE_FILE"
    echo ""

    echo "3. CONFIGURATION:"
    if [ -z "$VAULT_PATH" ]; then echo "   VAULT_PATH is not set."; else echo "   VAULT_PATH: $VAULT_PATH"; fi
    echo ""

    echo "4. TEMPLATE CONTENT:"
    if [ -f "$SCRIPT_DIR/$TEMPLATE_FILE" ]; then
        echo "--- (start of template) ---"
        cat "$SCRIPT_DIR/$TEMPLATE_FILE"
        echo "--- (end of template) ---"
    else
        echo "   ERROR: Template file not found at $SCRIPT_DIR/$TEMPLATE_FILE"
    fi
    echo ""

    echo "5. SUBSTITUTION TEST (using awk):"
    test_string="replace <% this %>"
    test_var="WORKED"
    result_string=$(echo "$test_string" | awk -v var="$test_var" '{ gsub(/<% this %>/, var); print }')
    echo "   Original string: '$test_string'"
    echo "   Replacement variable: '$test_var'"
    echo "   Result: '$result_string'"
    if [[ "$result_string" == "replace WORKED" ]]; then
        echo "   ✅ Substitution engine appears to be working."
    else
        echo "   ❌ SUBSTITUTION ENGINE FAILED."
    fi
    echo ""
    echo "--- END OF DEBUG ---"
    exit 0
fi

if [ -z "$VAULT_PATH" ]; then echo "VAULT_PATH is not set. Please run 'note -vault'." >&2; exit 1; fi

# --- Static Config & Helpers ---
DEFAULT_SUBDIR="00 - Inbox"
VSCODE_CMD="code"
to_kebab_case() { echo "$1" | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr '[:upper:]' '[:lower:]'; }

# --- Main Note Logic ---
if [[ "$1" == "-obsidian" ]]; then echo "Launching Obsidian..."; VAULT_NAME=$(basename "$VAULT_PATH"); open "obsidian://open?vault=$VAULT_NAME"; exit 0; fi

NOTE_STRING=""; KEYWORDS=()
for arg in "$@" ; do
    case "$arg" in
        '#'*) KEYWORDS+=("$(echo "${arg#\#}" | tr '[:upper:]' '[:lower:]')") ;; # Corrected: escaped '#' and removed extraneous 'e'
        *) if [[ -z "$NOTE_STRING" ]]; then NOTE_STRING="$arg"; fi ;;
    esac
done

MODE="editor"; [[ -n "$NOTE_STRING" ]] && MODE="atomic"
TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S'); FILE_TIMESTAMP=$(date +'%Y-%m-%d_%H-%M')
SUBDIR="$DEFAULT_SUBDIR"; TITLE=""; BODY=""; KEYWORDS_STRING=""
if [ ${#KEYWORDS[@]} -gt 0 ]; then SUBDIR="${KEYWORDS[0]}"; KEYWORDS_STRING=$(IFS=,; echo "${KEYWORDS[*]}"); fi
if [ "$MODE" == "atomic" ]; then TITLE=$(echo "$NOTE_STRING" | cut -c 1-80); BODY="$NOTE_STRING"; else TITLE="untitled"; BODY=""; fi
KEBAB_TITLE=$(to_kebab_case "$TITLE"); FILENAME="${FILE_TIMESTAMP}_${KEBAB_TITLE}.md"
TARGET_DIR="${VAULT_PATH}/${SUBDIR}"; FILEPATH="${TARGET_DIR}/${FILENAME}"; mkdir -p "$TARGET_DIR"
TEMPLATE_PATH="$SCRIPT_DIR/$TEMPLATE_FILE"

if [ ! -f "$TEMPLATE_PATH" ]; then 
    echo "Warning: Template file not found. Creating empty note." >&2; touch "$FILEPATH"
else
    # Use cat to pipe the template into awk for maximum portability
    CONTENT=$(cat "$TEMPLATE_PATH" | awk -v ts="$TIMESTAMP" -v ti="$TITLE" -v kw="$KEYWORDS_STRING" -v bd="$BODY" '{ 
        gsub(/<% timestamp %>/, ts);
        gsub(/<% title %>/, ti);
        gsub(/<% keywords %>/, kw);
        gsub(/<% body %>/, bd);
        print;
    }')
    echo "$CONTENT" > "$FILEPATH"
fi

echo "Note created: $FILEPATH"
if [ "$MODE" == "editor" ]; then echo "Opening for editing..."; $VSCODE_CMD -g "$FILEPATH":3; fi
